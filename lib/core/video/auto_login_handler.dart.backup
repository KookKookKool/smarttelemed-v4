// lib/core/video/auto_login_handler.dart
import 'dart:convert';
import 'package:smarttelemed_v4/core/video/video_config.dart';

class AutoLoginHandler {
  /// สร้าง URL พร้อม credentials แบบต่างๆ
  static String buildAuthenticatedUrl(String baseUrl) {
          'input[name="sessionName"]',
          'input[id="room"]',
          'input[id="roomName"]',
          'input[id="sessionName"]',
          'input[placeholder*="room" i]',
          'input[placeholder*="session" i]',
          'input[placeholder*="conference" i]',
          '.room input',
          '.session input'
        ];
        
        for (const selector of roomSelectors) {
          const roomField = document.querySelector(selector);
          if (roomField && roomField.offsetParent !== null && !roomField.value) {
            roomField.value = 'telemed_test';
            roomField.dispatchEvent(new Event('input', { bubbles: true }));
            roomField.dispatchEvent(new Event('change', { bubbles: true }));
            console.log('Post-login room name filled: telemed_test');
            VideoCallChannel.postMessage('room_filled_post_login');
            break;
          }
        }
      }, 1000);
    }
    
    // Schedule room fill multiple times for different page states
    scheduleRoomFill();
    setTimeout(scheduleRoomFill, 2000);
    setTimeout(scheduleRoomFill, 5000); baseUrl) {
    // วิธีที่ 1: ส่งผ่าน URL parameters
    final uri = Uri.parse(baseUrl);
    final authParams = Map<String, String>.from(uri.queryParameters);

    authParams.addAll({
      'username': VideoConfig.defaultUserId,
      'password': VideoConfig.defaultPassword,
      'autoLogin': 'true',
      'skipAuth': 'true',
    });

    return uri.replace(queryParameters: authParams).toString();
  }

  /// สร้าง basic auth header
  static String createBasicAuthHeader() {
    final credentials =
        '${VideoConfig.defaultUserId}:${VideoConfig.defaultPassword}';
    return base64Encode(utf8.encode(credentials));
  }

  /// สร้าง cookie string สำหรับ authentication
  static String createAuthCookie() {
    final credentials = base64Encode(
      utf8.encode(
        '${VideoConfig.defaultUserId}:${VideoConfig.defaultPassword}',
      ),
    );
    return 'auth_token=$credentials; session_id=telemed_${DateTime.now().millisecondsSinceEpoch}';
  }

  /// JavaScript สำหรับ auto-login หลายแบบ
  static const String multiMethodAutoLoginScript =
      '''
    console.log('Starting multi-method auto-login...');
    
    // Method 1: กรอก form fields
    function tryFormLogin() {
      console.log('Trying form login...');
      
      // หา username/email fields
      const usernameSelectors = [
        'input[name="username"]',
        'input[name="email"]',
        'input[id="username"]',
        'input[id="email"]',
        'input[type="text"]',
        'input[placeholder*="user" i]',
        'input[placeholder*="email" i]',
        '.username input',
        '.email input'
      ];
      
      let usernameField = null;
      for (const selector of usernameSelectors) {
        usernameField = document.querySelector(selector);
        if (usernameField && usernameField.offsetParent !== null) break;
      }
      
      // หา password fields
      const passwordSelectors = [
        'input[name="password"]',
        'input[id="password"]',
        'input[type="password"]',
        '.password input'
      ];
      
      let passwordField = null;
      for (const selector of passwordSelectors) {
        passwordField = document.querySelector(selector);
        if (passwordField && passwordField.offsetParent !== null) break;
      }
      
      // หา room/session name fields
      const roomSelectors = [
        'input[name="room"]',
        'input[name="session"]',
        'input[name="roomName"]',
        'input[id="room"]',
        'input[id="session"]',
        'input[placeholder*="room" i]',
        'input[placeholder*="session" i]',
        'input[placeholder*="conference" i]',
        '.room input',
        '.session input'
      ];
      
      let roomField = null;
      for (const selector of roomSelectors) {
        roomField = document.querySelector(selector);
        if (roomField && roomField.offsetParent !== null) break;
      }
      
      if (usernameField && passwordField) {
        usernameField.value = '${VideoConfig.defaultUserId}';
        passwordField.value = '${VideoConfig.defaultPassword}';
        
        // กรอก room name ถ้ามี
        if (roomField) {
          roomField.value = 'telemed_test';
          roomField.dispatchEvent(new Event('input', { bubbles: true }));
          console.log('Room name filled: telemed_test');
        }
        
        // Trigger events
        usernameField.dispatchEvent(new Event('input', { bubbles: true }));
        passwordField.dispatchEvent(new Event('input', { bubbles: true }));
        
        console.log('Credentials filled');
        VideoCallChannel.postMessage('credentials_filled');
        
        // หา submit button
        setTimeout(() => {
          const buttonSelectors = [
            'button[type="submit"]',
            'input[type="submit"]',
            'button:contains("Login")',
            'button:contains("เข้าสู่ระบบ")',
            '.login-btn',
            '#login-btn',
            '.btn-login',
            'form button'
          ];
          
          let submitButton = null;
          for (const selector of buttonSelectors) {
            const buttons = document.querySelectorAll(selector);
            for (const btn of buttons) {
              if (btn.offsetParent !== null) {
                submitButton = btn;
                break;
              }
            }
            if (submitButton) break;
          }
          
          if (submitButton) {
            submitButton.click();
            console.log('Submit button clicked');
            VideoCallChannel.postMessage('login_submitted');
          } else {
            // ลอง submit form
            const form = usernameField.closest('form');
            if (form) {
              form.submit();
              console.log('Form submitted');
              VideoCallChannel.postMessage('form_submitted');
            }
          }
        }, 500);
        
        return true;
      }
      return false;
    }
    
    // Method 2: ลอง localStorage/sessionStorage
    function tryStorageAuth() {
      console.log('Trying storage auth...');
      try {
        localStorage.setItem('username', '${VideoConfig.defaultUserId}');
        localStorage.setItem('password', '${VideoConfig.defaultPassword}');
        localStorage.setItem('autoLogin', 'true');
        localStorage.setItem('roomName', 'telemed_test');
        sessionStorage.setItem('user', '${VideoConfig.defaultUserId}');
        sessionStorage.setItem('room', 'telemed_test');
        console.log('Storage auth set');
        VideoCallChannel.postMessage('storage_auth_set');
      } catch (e) {
        console.log('Storage auth failed:', e);
      }
    }
    
    // Method 3: ตรวจสอบ URL parameters
    function checkUrlParams() {
      const params = new URLSearchParams(window.location.search);
      if (params.get('autoLogin') === 'true') {
        console.log('Auto-login parameter detected');
        VideoCallChannel.postMessage('auto_login_param_detected');
      }
    }
    
    // Method 4: ลอง API call
    function tryApiAuth() {
      console.log('Trying API auth...');
      fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username: '${VideoConfig.defaultUserId}',
          password: '${VideoConfig.defaultPassword}'
        })
      }).then(response => {
        if (response.ok) {
          console.log('API auth successful');
          VideoCallChannel.postMessage('api_auth_success');
        }
      }).catch(e => {
        console.log('API auth failed:', e);
      });
    }
    
    // Execute all methods
    setTimeout(() => {
      tryStorageAuth();
      checkUrlParams();
      
      // ลอง form login หลายครั้ง
      if (!tryFormLogin()) {
        setTimeout(tryFormLogin, 1000);
        setTimeout(tryFormLogin, 2000);
      }
      
      tryApiAuth();
    }, 500);
    
    // Monitor for login success
    function checkLoginSuccess() {
      // ตรวจสอบ indicators ต่างๆ ว่า login สำเร็จแล้ว
      if (document.querySelector('.video-container, #video-container, .openvidu-container')) {
        console.log('Video container detected - login success');
        VideoCallChannel.postMessage('login_success_detected');
      }
      
      if (window.location.href.includes('dashboard') || window.location.href.includes('room')) {
        console.log('Room URL detected - login success');
        VideoCallChannel.postMessage('room_entered');
      }
    }
    
    // Check login success periodically
    setInterval(checkLoginSuccess, 2000);
  ''';
}
