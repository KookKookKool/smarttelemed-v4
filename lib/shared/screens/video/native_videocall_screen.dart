import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:http/http.dart' as http;
import 'package:camera/camera.dart';
import 'dart:convert';

/// Native Video Call Screen ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenVidu ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
/// ‡πÉ‡∏ä‡πâ Native Camera ‡πÅ‡∏ó‡∏ô WebView ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ media permissions
class NativeVideoCallScreen extends StatefulWidget {
  final String? userId;
  final String? sessionId;

  const NativeVideoCallScreen({super.key, this.userId, this.sessionId});

  @override
  State<NativeVideoCallScreen> createState() => _NativeVideoCallScreenState();
}

class _NativeVideoCallScreenState extends State<NativeVideoCallScreen> {
  bool _isConnecting = false;
  bool _isConnected = false;
  bool _isCameraOn = true;
  bool _isMicOn = true;
  String _statusMessage = '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...';

  // OpenVidu configuration
  final String _openViduUrl = 'https://conference.pcm-life.com';
  final String _sessionName = 'telemed-test';
  String? _sessionId;
  String? _token;
  String? _workingCredential;

  // Camera
  CameraController? _cameraController;
  List<CameraDescription>? _cameras;
  bool _isCameraInitialized = false;

  @override
  void initState() {
    super.initState();
    _initializeVideoCall();
  }

  @override
  void dispose() {
    _cameraController?.dispose();
    super.dispose();
  }

  Future<void> _initializeVideoCall() async {
    setState(() {
      _isConnecting = true;
      _statusMessage = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡∏Ñ‡πå...';
    });

    try {
      // Step 1: ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï permissions
      await _requestPermissions();

      setState(() {
        _statusMessage = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á...';
      });

      // Step 2: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
      await _initializeCamera();

      setState(() {
        _statusMessage = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°...';
      });

      // Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á OpenVidu session ‡πÅ‡∏•‡∏∞ token
      await _connectToOpenViduService();
    } catch (e) {
      setState(() {
        _statusMessage = '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e';
        _isConnecting = false;
      });
    }
  }

  Future<void> _requestPermissions() async {
    final permissions = [Permission.camera, Permission.microphone];
    Map<Permission, PermissionStatus> statuses = await permissions.request();

    for (var permission in permissions) {
      if (statuses[permission] != PermissionStatus.granted) {
        throw Exception('‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡∏Ñ‡πå');
      }
    }

    debugPrint('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï camera ‡πÅ‡∏•‡∏∞ microphone ‡πÅ‡∏•‡πâ‡∏ß');
  }

  Future<void> _initializeCamera() async {
    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ
      _cameras = await availableCameras();

      if (_cameras == null || _cameras!.isEmpty) {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå');
      }

      // ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏£‡∏Å
      CameraDescription camera = _cameras!.firstWhere(
        (camera) => camera.lensDirection == CameraLensDirection.front,
        orElse: () => _cameras!.first,
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á camera controller
      _cameraController = CameraController(
        camera,
        ResolutionPreset.medium,
        enableAudio: true,
      );

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
      await _cameraController!.initialize();

      setState(() {
        _isCameraInitialized = true;
      });

      debugPrint('‚úÖ Camera initialized successfully');
    } catch (e) {
      debugPrint('‚ùå Camera initialization error: $e');
      throw e;
    }
  }

  Future<void> _connectToOpenViduService() async {
    try {
      // Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á session
      final sessionResponse = await _createSession();
      if (sessionResponse == null) {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÑ‡∏î‡πâ');
      }

      _sessionId = sessionResponse;

      setState(() {
        _statusMessage = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á token...';
      });

      // Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á token
      final tokenResponse = await _createToken(_sessionId!);
      if (tokenResponse == null) {
        throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÑ‡∏î‡πâ');
      }

      _token = tokenResponse;

      setState(() {
        _statusMessage = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°...';
      });

      // Step 3: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await _connectToRoom();
    } catch (e) {
      setState(() {
        _statusMessage = '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OpenVidu ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e';
        _isConnecting = false;
      });
    }
  }

  Future<String?> _createSession() async {
    try {
      debugPrint(
        'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡∏Å‡∏±‡∏ö URL: $_openViduUrl/openvidu/api/sessions',
      );
      final url = Uri.parse('$_openViduUrl/openvidu/api/sessions');

      // ‡∏•‡∏≠‡∏á credentials ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
      final credentialsList = [
        'user:minadadmin',
        'OPENVIDUAPP:MY_SECRET',
        'OPENVIDUAPP:minadadmin',
        'admin:minadadmin',
        'admin:admin',
        'admin:password',
        'root:minadadmin',
        'pcm:minadadmin',
        'pcm-life:minadadmin',
        'conference:minadadmin',
      ];

      for (String credential in credentialsList) {
        debugPrint('üîë ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ credential: ${credential.split(':')[0]}:***');

        final response = await http.post(
          url,
          headers: {
            'Authorization': 'Basic ' + base64Encode(utf8.encode(credential)),
            'Content-Type': 'application/json',
          },
          body: jsonEncode({'customSessionId': _sessionName}),
        );

        debugPrint('üì° Response status: ${response.statusCode}');
        debugPrint('üìù Response body: ${response.body}');

        if (response.statusCode == 200 || response.statusCode == 409) {
          // 409 = session already exists (‡∏ã‡∏∂‡πà‡∏á‡∏Å‡πá OK)
          debugPrint('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ credential: $credential');

          // ‡πÄ‡∏Å‡πá‡∏ö credential ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á token
          setState(() {
            _workingCredential = credential;
          });

          // ‡∏ñ‡πâ‡∏≤ response body ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ parse JSON
          if (response.body.isNotEmpty) {
            final data = jsonDecode(response.body);
            return data['id'] ?? _sessionName;
          } else {
            // ‡∏ñ‡πâ‡∏≤ response body ‡∏ß‡πà‡∏≤‡∏á (‡∏Å‡∏£‡∏ì‡∏µ 409) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ session name ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            return _sessionName;
          }
        }
      }

      debugPrint('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö credential ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
      return null;
    } catch (e) {
      debugPrint('‚ùå Create session exception: $e');
      return null;
    }
  }

  Future<String?> _createToken(String sessionId) async {
    try {
      final url = Uri.parse(
        '$_openViduUrl/openvidu/api/sessions/$sessionId/connection',
      );

      // ‡πÉ‡∏ä‡πâ credential ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å _createSession
      final credentialToUse = _workingCredential ?? 'user:minadadmin';
      debugPrint(
        'üîë ‡πÉ‡∏ä‡πâ credential ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö token: ${credentialToUse.split(':')[0]}:***',
      );

      final response = await http.post(
        url,
        headers: {
          'Authorization':
              'Basic ' + base64Encode(utf8.encode(credentialToUse)),
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'role': 'PUBLISHER',
          'data':
              'Patient_${widget.userId ?? DateTime.now().millisecondsSinceEpoch}',
        }),
      );

      debugPrint('üì° Token response status: ${response.statusCode}');
      debugPrint('üìù Token response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        debugPrint('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        return data['token'];
      } else {
        debugPrint(
          '‚ùå Create token error: ${response.statusCode} - ${response.body}',
        );
        return null;
      }
    } catch (e) {
      debugPrint('‚ùå Create token exception: $e');
      return null;
    }
  }

  Future<void> _connectToRoom() async {
    try {
      setState(() {
        _isConnected = true;
        _isConnecting = false;
        _statusMessage = '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Video Call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!';
      });

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
      debugPrint('üéâ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á OpenVidu ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      debugPrint('üì∫ Session Name: $_sessionName');
      debugPrint('üåê Server URL: $_openViduUrl');
      debugPrint(
        'üîó ‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á "$_sessionName" ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà $_openViduUrl',
      );

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.check_circle, color: Colors.white),
                const SizedBox(width: 8),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      const Text('üéâ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Video Call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'),
                      Text(
                        '‡∏´‡πâ‡∏≠‡∏á: $_sessionName',
                        style: const TextStyle(
                          fontSize: 12,
                          color: Colors.white70,
                        ),
                      ),
                      Text(
                        '‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á "$_sessionName" ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢',
                        style: const TextStyle(
                          fontSize: 10,
                          color: Colors.white60,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 5),
          ),
        );
      }
    } catch (e) {
      setState(() {
        _statusMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Video Call ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e';
        _isConnecting = false;
      });
    }
  }

  void _toggleCamera() {
    setState(() {
      _isCameraOn = !_isCameraOn;
    });

    // ‡πÉ‡∏ô implementation ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î/‡πÄ‡∏£‡∏¥‡πà‡∏° camera stream
    debugPrint('üìπ Camera ${_isCameraOn ? 'ON' : 'OFF'}');
  }

  void _toggleMicrophone() {
    setState(() {
      _isMicOn = !_isMicOn;
    });

    // ‡πÉ‡∏ô implementation ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î/‡πÄ‡∏£‡∏¥‡πà‡∏° audio stream
    debugPrint('üé§ Microphone ${_isMicOn ? 'ON' : 'OFF'}');
  }

  void _switchCamera() async {
    if (_cameras != null && _cameras!.length > 1 && _cameraController != null) {
      final currentCamera = _cameraController!.description;
      CameraDescription newCamera;

      if (currentCamera.lensDirection == CameraLensDirection.front) {
        newCamera = _cameras!.firstWhere(
          (camera) => camera.lensDirection == CameraLensDirection.back,
          orElse: () => currentCamera,
        );
      } else {
        newCamera = _cameras!.firstWhere(
          (camera) => camera.lensDirection == CameraLensDirection.front,
          orElse: () => currentCamera,
        );
      }

      if (newCamera != currentCamera) {
        await _cameraController!.dispose();
        _cameraController = CameraController(
          newCamera,
          ResolutionPreset.medium,
          enableAudio: true,
        );
        await _cameraController!.initialize();
        setState(() {});
        debugPrint('üîÑ Switched camera');
      }
    }
  }

  void _endCall() {
    Navigator.of(context).pop();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: const Text('Video Call', style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.black,
        iconTheme: const IconThemeData(color: Colors.white),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: _endCall,
        ),
      ),
      body: _isConnected ? _buildVideoCallUI() : _buildConnectingUI(),
    );
  }

  Widget _buildConnectingUI() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          if (_isConnecting) ...[
            const CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),
            ),
            const SizedBox(height: 24),
          ],
          Text(
            _statusMessage,
            style: const TextStyle(color: Colors.white, fontSize: 16),
            textAlign: TextAlign.center,
          ),
          if (!_isConnecting && _statusMessage.contains('‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')) ...[
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _initializeVideoCall,
              child: const Text('‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildVideoCallUI() {
    return Stack(
      children: [
        // Remote video area (‡πÅ‡∏ö‡πá‡∏Ñ‡∏Å‡∏£‡∏≤‡∏ß‡∏î‡πå)
        Container(
          width: double.infinity,
          height: double.infinity,
          color: Colors.grey[900],
          child: const Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(Icons.person, size: 100, color: Colors.grey),
                SizedBox(height: 16),
                Text(
                  '‡∏£‡∏≠‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°...',
                  style: TextStyle(color: Colors.white, fontSize: 16),
                ),
              ],
            ),
          ),
        ),

        // Local camera preview (‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤)
        Positioned(
          top: 40,
          right: 20,
          child: Container(
            width: 120,
            height: 160,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.white, width: 2),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(6),
              child:
                  _isCameraInitialized &&
                      _cameraController != null &&
                      _cameraController!.value.isInitialized &&
                      _isCameraOn
                  ? CameraPreview(_cameraController!)
                  : Container(
                      color: Colors.grey[800],
                      child: const Center(
                        child: Icon(
                          Icons.videocam_off,
                          color: Colors.white,
                          size: 40,
                        ),
                      ),
                    ),
            ),
          ),
        ),

        // Session info (‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)
        Positioned(
          top: 40,
          left: 20,
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: Colors.black54,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '‡∏´‡πâ‡∏≠‡∏á: $_sessionName',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: conference.pcm-life.com',
                  style: const TextStyle(color: Colors.white70, fontSize: 10),
                ),
                if (_token != null)
                  Text(
                    'üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß',
                    style: const TextStyle(color: Colors.green, fontSize: 10),
                  ),
                Text(
                  '‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á "$_sessionName"',
                  style: const TextStyle(color: Colors.yellow, fontSize: 9),
                ),
              ],
            ),
          ),
        ),

        // Control buttons (‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
        Positioned(
          bottom: 40,
          left: 0,
          right: 0,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              // Toggle microphone
              FloatingActionButton(
                heroTag: 'mic',
                onPressed: _toggleMicrophone,
                backgroundColor: _isMicOn ? Colors.blue : Colors.red,
                child: Icon(
                  _isMicOn ? Icons.mic : Icons.mic_off,
                  color: Colors.white,
                ),
              ),

              // Switch camera
              FloatingActionButton(
                heroTag: 'switch',
                onPressed: _switchCamera,
                backgroundColor: Colors.grey[700],
                child: const Icon(Icons.switch_camera, color: Colors.white),
              ),

              // End call
              FloatingActionButton(
                heroTag: 'end',
                onPressed: _endCall,
                backgroundColor: Colors.red,
                child: const Icon(Icons.call_end, color: Colors.white),
              ),

              // Toggle camera
              FloatingActionButton(
                heroTag: 'camera',
                onPressed: _toggleCamera,
                backgroundColor: _isCameraOn ? Colors.blue : Colors.red,
                child: Icon(
                  _isCameraOn ? Icons.videocam : Icons.videocam_off,
                  color: Colors.white,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
